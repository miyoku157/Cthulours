//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using AiRuleEngine;
using UnityEngine.UI;

namespace AssemblyCSharp
{
	public class Pouvoir : MonoBehaviour
	{
		private GameObject gameController;

		private GameObject obstacle;
		private Obstacle obs;
		private float X, Y;
		private static bool[] cooldowns = new bool[4];

		public string type;

		public void execute()
		{
			switch(type)
			{
				case "Sat" :
					if(!cooldowns[0])
				   		StartCoroutine("WaitForSignalSat");
				break;
				
				case "Exp" :
					if(!cooldowns[1])
					{
						if(gameController == null)
							gameController = GameObject.FindGameObjectWithTag("GameController");
						gameController.AddComponent<Explosion>();
						Explosion.zone = 2;
						Explosion.degat = 15;
					}
				break;

				case "Hlb" :
					if(!cooldowns[2])
					{
						GameObject bunker = GameObject.FindGameObjectWithTag("Bunker");

						if(bunker != null)
						{
							Double pv = bunker.GetComponent<Element>().PV;
							pv += 75;
							if(pv > 100)
							{
								pv = 100;
							}
							bunker.GetComponent<Element>().PV = pv;
						}
						cooldowns[2] = true;
						StartCoroutine("Cooldown", "Hlb");
					}
				break;

				case "Hlr" :
					if(!cooldowns[3])
					{
						cooldowns[3] = true;
						StartCoroutine("Cooldown", "Hlr");
					}
				break;
			}
		}

		public void getParameters()
		{
			switch(type)
			{
				case "Sat" :
					RaycastHit vHit = new RaycastHit();
					Ray vRay = Camera.main.ScreenPointToRay(Input.mousePosition);
					
					if(Physics.Raycast(vRay, out vHit, 50)) 
					{
						X = vHit.point.x;
						if(X < Math.Truncate(X))
						{
							X = (float)Math.Truncate(X) - 1;
						}
						else
						{
							X = (float)Math.Truncate(X);
						}
						
						Y = vHit.point.y;
						if(Y < Math.Truncate(Y))
						{
							Y = (float)Math.Truncate(Y) - 1;
						}
						else
						{
							Y = (float)Math.Truncate(Y);
						}
					}
				break;
				
				case "Exp" :
				
				break;
			}
		}

		IEnumerator WaitForSignalSat()
		{
			bool placed = false;
			GameObject cross;
			SpriteRenderer spriteR;

			getParameters();

			cross = new GameObject("Cross");
			cross.transform.position = new Vector2(X + 0.5f, Y + 0.5f);
			cross.transform.localScale = new Vector2(0.5f, 0.5f);
			cross.transform.parent = gameObject.transform;

			spriteR = cross.AddComponent<SpriteRenderer>();
			spriteR.sprite = Resources.Load<Sprite>("Textures/Effets/marqueur_centre_capa");
			spriteR.sortingLayerName = "Tir";

			while(!placed)
			{
				yield return new WaitForSeconds(0.01f);
				getParameters();

				if(Application.platform == RuntimePlatform.Android)
				{
					cross.SetActive(false);

					if(Input.GetMouseButtonDown(0) && cross != null)
					{
						if(!Niveau.grille[(int)X, (int)Y].GetComponent<Case>().occupe)
						{
							obstacle = Instantiate(Resources.Load("Prefab/Neutre/ObstacleNeutre1"))as GameObject;
							obstacle.GetComponent<Transform>().position = new Vector2(X + 0.5f, Y + 0.5f);
							Niveau.grille[(int)X, (int)Y].GetComponent<Case>().occupe = true;
							Niveau.grille[(int)X, (int)Y].GetComponent<Case>().element = obstacle;
							
							obs = obstacle.AddComponent<Obstacle>();
							obs.Initialize("Obstacle", "Obstacle", "", 1, 10000, 50, 1, 0, 0, false, 0);
							Destroy(obstacle, 120.0f);
							Destroy(cross);
							cooldowns[0] = true;
							StartCoroutine("Cooldown", "Sat");
						}
						else
						{
							Destroy(cross);
						}
					}
				}
				else
				{
					cross.transform.position = new Vector2(X + 0.5f, Y + 0.5f);
					
					if(Input.GetMouseButtonDown(0) && cross != null)
					{
						placed = true;
						
						if(!Niveau.grille[(int)X, (int)Y].GetComponent<Case>().occupe)
						{
							obstacle = Instantiate(Resources.Load("Prefab/Neutre/ObstacleNeutre1"))as GameObject;
							obstacle.GetComponent<Transform>().position = new Vector2(X + 0.5f, Y + 0.5f);
							Niveau.grille[(int)X, (int)Y].GetComponent<Case>().occupe = true;
							Niveau.grille[(int)X, (int)Y].GetComponent<Case>().element = obstacle;
							
							obs = obstacle.AddComponent<Obstacle>();
							obs.Initialize("Obstacle", "Obstacle", "", 1, 100, 50, 1, 0, 0, false, 0);
							Destroy(obstacle, 120.0f);
							Destroy(cross);
							cooldowns[0] = true;
							StartCoroutine("Cooldown", "Sat");
						}
						else
						{
							Destroy(cross);
						}
					}
				}
			}
		}

		public IEnumerator Cooldown(string type)
		{
			float tParam = 0;

			switch(type)
			{
				case "Sat" :
					GameObject.Find("Skill1").GetComponent<AudioSource>().Play();
					GameObject.Find("Skill1").GetComponent<Image>().fillAmount = 0;
					while(GameObject.Find("Skill1").GetComponent<Image>().fillAmount < 1)
					{
						tParam += Time.deltaTime;
						GameObject.Find("Skill1").GetComponent<Image>().fillAmount = Mathf.Lerp(0f, 1f, tParam / 4);
						yield return new WaitForSeconds(0.01f);
					}
					cooldowns[0] = false;
				break;
				
				case "Exp" :
					GameObject.Find("Skill2").GetComponent<Image>().fillAmount = 0;
					while(GameObject.Find("Skill2").GetComponent<Image>().fillAmount < 1)
					{
						tParam += Time.deltaTime;
						GameObject.Find("Skill2").GetComponent<Image>().fillAmount = Mathf.Lerp(0f, 1f, tParam / 15);
						yield return new WaitForSeconds(0.01f);
					}
					cooldowns[1] = false;
				break;
				
				case "Hlb" :
					GameObject.Find("Skill3").GetComponent<AudioSource>().Play();
					GameObject.Find("Skill3").GetComponent<Image>().fillAmount = 0;
					while(GameObject.Find("Skill3").GetComponent<Image>().fillAmount < 1)
					{
						tParam += Time.deltaTime;
						GameObject.Find("Skill3").GetComponent<Image>().fillAmount = Mathf.Lerp(0f, 1f, tParam / 25);
						yield return new WaitForSeconds(0.01f);
					}
					cooldowns[2] = false;
				break;
				
				case "Hlr" :
					GameObject.Find("Skill4").GetComponent<AudioSource>().Play();
					GameObject.Find("Skill4").GetComponent<Image>().fillAmount = 0;
					while(GameObject.Find("Skill4").GetComponent<Image>().fillAmount < 1)
					{
						tParam += Time.deltaTime;
						GameObject.Find("Skill4").GetComponent<Image>().fillAmount = Mathf.Lerp(0f, 1f, tParam / 20);
						yield return new WaitForSeconds(0.01f);
					}
					cooldowns[3] = false;
				break;
			}

			yield return null;
		}

		public static void Initialize()
		{
			cooldowns = new bool[4];
		}

		public static void Launch(string type)
		{
			Pouvoir.cooldowns[1] = true;
			GameObject.Find("Skill2").GetComponent<Pouvoir>().StartCoroutine("Cooldown", type);
		}
	}
}

