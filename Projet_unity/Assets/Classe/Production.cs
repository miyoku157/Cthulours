//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace AssemblyCSharp
{
    public class Production
    {
        public double cout { get; set; }
        public float temps { get; set; }
        public string nom { get; set; }
        public bool is_locked;
        public string type;
        public static bool[][] is_done;
        public GameObject product_by { get; set; }
        public GameObject in_product { get; set; }
        public Production(string _nom, GameObject _product_by)
        {
            nom = _nom;
            product_by = _product_by;
            fabproduction();
        }
        public Production()
        {
        }
        public static void Initialize()
        {
            Production.is_done = new bool[2][];
            for (int i = 0; i < 2; i++)
            {
                Production.is_done[i] = new bool[2];
            }
        }
        private void fabproduction()
        {
            if (nom == "Poulpy")
            {
                cout = 50;
                temps = 2;
                type = "production";
            }
            else if (nom == "Octopus")
            {
                cout = 200;
                temps = 4;
                type = "production";
            }
            else if (nom == "Cyber-poulpe")
            {
                cout = 350;
                temps = 8;
                type = "production";
            }
            else if (nom == "Ourson")
            {
                cout = 50;
                temps = 2;
                type = "production";
            }
            else if (nom == "Ours Blanc")
            {
                cout = 200;
                temps = 4;
                type = "production";
            }
            else if (nom == "Ours de guerre")
            {
                cout = 350;
                temps = 4;
                type = "production";
            }
            if (nom == "Ventouses Laser")
            {
                cout = 500;
                temps = 5;
                type = "recherche";
            }
            else if (nom == "Plasma Defensif")
            {
                cout = 750;
                temps = 10;
                type = "recherche";
            }
            else if (nom == "Griffes Enchantees")
            {
                cout = 500;
                temps = 5;
                type = "recherche";
            }
            else if (nom == "Endurance Mystique")
            {
                cout = 750;
                temps = 10;
                type = "recherche";
            }

        }
        public void launchProduce()
        {
				int race=0;
				if(product_by.GetComponent<Element>().camp=="Ours"){
					race=0;
				}else{
					race=1;
				}
			List<Batiment> producer= new List<Batiment>();
			List<Batiment> is_product_ok= new List<Batiment>();
			List<Batiment> is_rech_ok= new List<Batiment>();
			for(int i=0; i<Niveau.list_element[race].Count;i++){
					if(Niveau.list_element[race][i].GetComponent<Batiment>()!=null){
						producer.Add(Niveau.list_element[race][i].GetComponent<Batiment>());
					}
				}
				if(type=="production"){
				for(int i=0; i<producer.Count;i++){
								if(!producer[i].is_product){
							is_product_ok.Add(producer[i]);
						}
					}
				int alea=UnityEngine.Random.Range(0,is_product_ok.Count);
				is_product_ok[alea].setProd(this);
				is_product_ok[alea].is_product=true;
				is_product_ok[alea].Invoke("execute_product",temps);
				}else{
				for(int i=0; i<producer.Count;i++){
					if(!producer[i].rech_product){
						is_rech_ok.Add(producer[i]);
					}
				}
				int alea=UnityEngine.Random.Range(0,is_rech_ok.Count);
				is_rech_ok[alea].setProd(this);
				is_rech_ok[alea].is_product=true;
				is_rech_ok[alea].Invoke("execute_product",temps);
				}
        }


    }
}

